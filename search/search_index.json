{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Project Template","text":"<p>A Python project template that comes out of the box with configuration for:</p> <ul> <li>Packaging and dependency management using Poetry</li> <li>Command Line Interface (CLI) using click</li> <li>Testing using pytest</li> <li>Code coverage using coverage</li> <li>Fomatting, import sorting, and linting using ruff </li> <li>Type checking using pyright</li> <li>Pre-commit validations using pre-commit</li> <li>Workflow automation using GitHub Actions</li> <li>Automated dependency update using Dependabot</li> <li>Dockerized development environment using Dev containers</li> <li>Automatic documentation from code using mkdocs and mkdocstrings</li> <li>Documentation auto-deployment to GiHub Pages</li> <li>App container using Docker</li> </ul>"},{"location":"#github-files","title":"GitHub files","text":"<p>The repository also comes pre-loaded with these GitHub files:</p> <ul> <li>Pull request template</li> <li>Issue templates<ul> <li>Bug report</li> <li>Feature request</li> <li>Question</li> </ul> </li> <li>Contributing guidelines</li> <li>Funding file</li> <li>Code owners</li> <li>MIT License</li> </ul>"},{"location":"#how-to-use","title":"How to use","text":"<p>Click this button to create a new repository for your project, then clone the new repository. Enjoy!</p> <p></p>"},{"location":"#rename-the-project","title":"Rename the project","text":"<p>After cloning the repository, rename the project by running:</p> <pre><code>make project NAME=\"\" DESCRIPTION=\"\" AUTHOR=\"\" EMAIL=\"\" GITHUB=\"\" SOURCE=\"\"\n</code></pre> <p>Pass the following parameters:</p> Parameter Description <code>NAME</code> Project new name <code>DESCRIPTION</code> Project short description <code>SOURCE</code> (optional) Source folder name <code>AUTHOR</code> Author name <code>EMAIL</code> Author email <code>GITHUB</code> GitHub username (for GitHub funding)"},{"location":"#prerequisites","title":"Prerequisites","text":""},{"location":"#dev-container","title":"Dev container","text":"<ul> <li>Docker</li> </ul>"},{"location":"#local-environment","title":"Local environment","text":"<ul> <li>Python 3.12+ (You can update the <code>pyproject.toml</code> for lower versions)</li> <li>Pipx (optional - used to install Poetry if not already installed)</li> </ul>"},{"location":"#setup","title":"Setup","text":""},{"location":"#install-poetry","title":"Install Poetry","text":"<p>To install poetry, if not installed (requires pipx), run:</p> <pre><code>make poetry\n</code></pre>"},{"location":"#install-update-dependencies","title":"Install / Update dependencies","text":"<p>To install the project dependencies defined in the pyproject.toml file, run:</p> <pre><code>make install\n</code></pre> <p>To update the project dependencies, run:</p> <pre><code>make update\n</code></pre>"},{"location":"#install-pre-commit-hooks","title":"Install pre-commit hooks","text":"<p>To install the pre-commit hooks for the project to format and lint your code automatically before commiting, run: </p> <pre><code>make precommit\n</code></pre>"},{"location":"#activate-virtual-environemnt","title":"Activate virtual environemnt","text":"<p>To activate the virtual environment, run:</p> <pre><code>make venv\n</code></pre>"},{"location":"#format-and-lint-code","title":"Format and Lint code","text":"<p>To format and lint project code, run:</p> <pre><code>make lint\n</code></pre>"},{"location":"#run-tests-with-coverage","title":"Run tests with coverage","text":"<p>To run the unit tests defined under the tests folder and show coverage report, run:</p> <pre><code>make test\n</code></pre>"},{"location":"#running-the-project","title":"Running the project","text":"<p>A Poetry script, with the name <code>app</code>, is defined in the pyproject.toml file, to let you to run the project as a shell command.</p>"},{"location":"#local-dev-container","title":"Local / Dev container","text":"<p>Make sure to activate the virtual environment using <code>make venv</code> to be able to run <code>app</code> without <code>poetry run</code></p> <p>Try running <code>app -h</code> or <code>app --help</code> to get the help message of your app:</p> <pre><code>Usage: app [OPTIONS]\n\n  Say hello\n\nOptions:\n  -n, --name TEXT  Name  [default: World]\n  -h, --help       Show this message and exit.\n</code></pre>"},{"location":"#docker","title":"Docker","text":"<p>To run in a Docker container, use:</p> <pre><code>docker compose run app -h\n</code></pre>"},{"location":"#generating-documentation","title":"Generating documentation","text":"<p>To generate and publish the project documentation to GitHub pages, run:</p> <pre><code>make docs\n</code></pre> <p>That pushes the new documentation to the gh-pages branch.  Make sure GitHub Pages is enableed in your repository settings and using the gh-pages branch for the documentation to be publicly available.</p>"},{"location":"#local","title":"Local","text":"<p>To serve the documentation on a local server, run:</p> <pre><code>make local\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>\u251c\u2500\u2500 .devcontainer                   # Dev container folder\n\u2502   \u251c\u2500\u2500 devcontainer.json           # Dev container configuration\n\u2502   \u2514\u2500\u2500 Dockerfile                  # Dev container Dockerfile\n\u251c\u2500\u2500 .github                         # Github folder\n\u2502   \u251c\u2500\u2500 dependabot.yaml             # Dependabot configuration\n\u2502   \u251c\u2500\u2500 CODEOWNERS                  # Code owners\n\u2502   \u251c\u2500\u2500 FUNDING.md                  # GitHub funding\n\u2502   \u251c\u2500\u2500 PULL_REQUEST_TEMPLATE.md    # Pull request template\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE              # Issue templates\n\u2502   \u2502   \u251c\u2500\u2500 bug.md                  # Bug report template\n\u2502   \u2502   \u251c\u2500\u2500 feature.md              # Feature request template\n\u2502   \u2502   \u2514\u2500\u2500 question.md             # Question template\n\u2502   \u2514\u2500\u2500 workflows                   # Github Actions Workflows\n\u2502       \u251c\u2500\u2500 check.yml               # Workflow to validate code on push\n\u2502       \u2514\u2500\u2500 docs.yml                # Woukflow to publish documentation\n\u251c\u2500\u2500 .gitignore                      # Git-ignored file list\n\u251c\u2500\u2500 .pre-commit-config.yaml         # Pre-commit configuration file\n\u251c\u2500\u2500 .vscode                         # VS code folder\n\u2502   \u2514\u2500\u2500 settings.json               # VS code settings\n\u251c\u2500\u2500 .dockerignore                   # Docker-ignored file list\n\u251c\u2500\u2500 compose.yml                     # Docker-compose file\n\u251c\u2500\u2500 Dockerfile                      # App container Dockerfile\n\u251c\u2500\u2500 LICENSE                         # Project license\n\u251c\u2500\u2500 Makefile                        # Make commands\n\u251c\u2500\u2500 pyproject.toml                  # Configuration file for different tools\n\u251c\u2500\u2500 docs                            # Documentaion folder\n\u2502   \u251c\u2500\u2500 mkdocs.yml                  # mkdocs configuration file\n\u2502   \u251c\u2500\u2500 README.md                   # Read-me file &amp; Documentation home page\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md             # Contributing guidelines\n\u2502   \u2514\u2500\u2500 reference                   # Reference section\n\u2502       \u2514\u2500\u2500 app.md                  # App reference page\n\u251c\u2500\u2500 project                         # Main project folder\n\u2502   \u251c\u2500\u2500 __init__.py                 # Init file of the main package\n\u2502   \u2514\u2500\u2500 app.py                      # Main Python file of the project\n\u2514\u2500\u2500 tests                           # Test folder\n    \u251c\u2500\u2500 __init__.py                 # Init file fo the test package\n    \u251c\u2500\u2500 conftest.py                 # Pytest configuration, and fixtures, and hooks\n    \u2514\u2500\u2500 test_app.py                 # Sample test file\n</code></pre>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. Here are some ways you can contribute to the project:</p> <ul> <li>Contribute to the code</li> <li>Report a bug</li> <li>Request a feature</li> <li>Ask a question</li> <li>Help with documentation</li> <li>Sponsor the project</li> <li>Star and share the project</li> </ul>"},{"location":"CONTRIBUTING/#contributing-to-the-code","title":"Contributing to the code","text":"<p>Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request.</p> <p>If you're looking for something to get your teeth into, check out issues with the <code>help wanted</code> label on GitHub.</p> <p>To make contributing as easy and fast as possible, you'll want to run tests and linting locally.</p>"},{"location":"CONTRIBUTING/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project licence.</p>"},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<p>You'll need the following prerequisites:</p> <ul> <li>Python 3.12+</li> <li>Poetry</li> <li>git</li> <li>make</li> </ul>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to contribute","text":"<ul> <li>Fork the repository on GitHub </li> <li>Clone your fork locally.</li> <li>Install the project dependencies:</li> </ul> <pre><code>make poetry install pre-commit\n</code></pre> <ul> <li>Create a new branch (with a descriptive name) for your changes:</li> </ul> <pre><code>git checkout -b my-new-feature  # use descriptive branch name\n</code></pre> <ul> <li>Make your code changes</li> <li>Run tests and linting locally to make sure everything is working as expected.</li> </ul> <pre><code>make lint test\n</code></pre> <ul> <li>Commit your changes and push your branch to GitHub</li> </ul> <pre><code>git add .\ngit commit -m \"My new feature\"  # use descriptive commit message\ngit push origin my-new-feature\n</code></pre> <ul> <li>Create a pull request, and request review from the team</li> </ul> <p>Please follow the pull request template and fill in as much information as possible. Link to any relevant issues and include a description of your changes.</p>"},{"location":"CONTRIBUTING/#code-documentation","title":"Code documentation","text":"<p>When contributing to this project, please make sure that all code is well documented. The following should be documented using properly formatted docstrings:</p> <ul> <li>Modules</li> <li>Class definitions</li> <li>Function definitions</li> <li>Module-level variables</li> </ul> <p>The project uses Google-style docstrings formatted according to PEP 257 guidelines. (See Example Google Style Python Docstrings for further examples.)</p>"},{"location":"CONTRIBUTING/#project-documentation","title":"Project Documentation","text":"<p>Project Documentation is written in Markdown and built using Material for MkDocs. API documentation is build from docstrings using mkdocstrings.</p> <p>To preview the docuementation on your local, run:</p> <pre><code>make local\n</code></pre>"},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"CONTRIBUTING/#before-submitting-a-bug-report","title":"Before submitting a bug report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions.</li> <li>Search exisitng issues to see if other users have experienced (and potentially already solved) the same issue you are having.</li> <li>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug, e.g., Stack trace (Traceback), OS, platform, and version, .. etc</li> </ul>"},{"location":"CONTRIBUTING/#how-to-submit-a-good-bug-report","title":"How to submit a good bug report?","text":"<ul> <li>Open an issue using the Bug Report template.</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once submitted, the team will try to reproduce the issue with your provided steps, and label the issue accordingly.</p>"},{"location":"CONTRIBUTING/#requesting-features","title":"Requesting Features","text":"<p>Features requests are tracked as GitHub issues.</p>"},{"location":"CONTRIBUTING/#before-submitting-a-feature-request","title":"Before Submitting a feature request","text":"<ul> <li>Make sure that you are using the latest version</li> <li>Read the documentation carefully and find out if the functionality is already covered.</li> <li>Search existing issues to see if the feature has already been requested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset.</li> </ul>"},{"location":"CONTRIBUTING/#how-to-submit-a-good-feature-request","title":"How to submit a good feature request?","text":"<ul> <li>Open an issue using the Feature Request template.</li> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>Explain why this enhancement would be useful to most template users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"CONTRIBUTING/#asking-questions","title":"Asking Questions","text":"<p>If you want to ask a question, we assume that you have read the documentation.</p> <p>Before you ask a question, it is best to search for existing issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in that issue.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an issue using the Question template.</li> <li>Provide as much context as you can about what you're running into.</li> </ul> <p>We will then try to answer your question as soon as possible.</p>"},{"location":"reference/app/","title":"App","text":""},{"location":"reference/app/#project.app.main","title":"<code>main(name='World')</code>","text":"<p>Say hello to the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>the name to be greeted</p> <code>'World'</code> Source code in <code>project/app.py</code> <pre><code>@command(context_settings={\"help_option_names\": [\"-h\", \"--help\"]}, help=\"Say hello\")\n@option(\"-n\", \"--name\", default=\"World\", help=\"Name\", show_default=True)\ndef main(name: str = \"World\"):\n    \"\"\"\n    Say hello to the given name.\n\n    Args:\n      name: the name to be greeted\n    \"\"\"\n    print(f\"Hello {name}!\")\n</code></pre>"}]}